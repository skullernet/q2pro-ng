/*
Copyright (C) 2025 Andrey Nazarov

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

typedef enum {
    Unreachable         = 0x00,
    Nop                 = 0x01,
    Block               = 0x02,
    Loop                = 0x03,
    If                  = 0x04,
    Else                = 0x05,
    End                 = 0x0B,
    Br                  = 0x0C,
    BrIf                = 0x0D,
    BrTable             = 0x0E,
    Return              = 0x0F,
    Call                = 0x10,
    CallIndirect        = 0x11,
    Drop                = 0x1A,
    Select              = 0x1B,
    LocalGet            = 0x20,
    LocalSet            = 0x21,
    LocalTee            = 0x22,
    GlobalGet           = 0x23,
    GlobalSet           = 0x24,
    TableGet            = 0x25,
    TableSet            = 0x26,
    I32_Load            = 0x28,
    I64_Load            = 0x29,
    F32_Load            = 0x2A,
    F64_Load            = 0x2B,
    I32_Load8_s         = 0x2C,
    I32_Load8_u         = 0x2D,
    I32_Load16_s        = 0x2E,
    I32_Load16_u        = 0x2F,
    I64_Load8_s         = 0x30,
    I64_Load8_u         = 0x31,
    I64_Load16_s        = 0x32,
    I64_Load16_u        = 0x33,
    I64_Load32_s        = 0x34,
    I64_Load32_u        = 0x35,
    I32_Store           = 0x36,
    I64_Store           = 0x37,
    F32_Store           = 0x38,
    F64_Store           = 0x39,
    I32_Store8          = 0x3A,
    I32_Store16         = 0x3B,
    I64_Store8          = 0x3C,
    I64_Store16         = 0x3D,
    I64_Store32         = 0x3E,
    MemorySize          = 0x3F,
    MemoryGrow          = 0x40,
    I32_Const           = 0x41,
    I64_Const           = 0x42,
    F32_Const           = 0x43,
    F64_Const           = 0x44,
    I32_Eqz             = 0x45,
    I32_Eq              = 0x46,
    I32_Ne              = 0x47,
    I32_Lt_s            = 0x48,
    I32_Lt_u            = 0x49,
    I32_Gt_s            = 0x4A,
    I32_Gt_u            = 0x4B,
    I32_Le_s            = 0x4C,
    I32_Le_u            = 0x4D,
    I32_Ge_s            = 0x4E,
    I32_Ge_u            = 0x4F,
    I64_Eqz             = 0x50,
    I64_Eq              = 0x51,
    I64_Ne              = 0x52,
    I64_Lt_s            = 0x53,
    I64_Lt_u            = 0x54,
    I64_Gt_s            = 0x55,
    I64_Gt_u            = 0x56,
    I64_Le_s            = 0x57,
    I64_Le_u            = 0x58,
    I64_Ge_s            = 0x59,
    I64_Ge_u            = 0x5A,
    F32_Eq              = 0x5B,
    F32_Ne              = 0x5C,
    F32_Lt              = 0x5D,
    F32_Gt              = 0x5E,
    F32_Le              = 0x5F,
    F32_Ge              = 0x60,
    F64_Eq              = 0x61,
    F64_Ne              = 0x62,
    F64_Lt              = 0x63,
    F64_Gt              = 0x64,
    F64_Le              = 0x65,
    F64_Ge              = 0x66,
    I32_Clz             = 0x67,
    I32_Ctz             = 0x68,
    I32_Popcnt          = 0x69,
    I32_Add             = 0x6A,
    I32_Sub             = 0x6B,
    I32_Mul             = 0x6C,
    I32_Div_s           = 0x6D,
    I32_Div_u           = 0x6E,
    I32_Rem_s           = 0x6F,
    I32_Rem_u           = 0x70,
    I32_And             = 0x71,
    I32_Or              = 0x72,
    I32_Xor             = 0x73,
    I32_Shl             = 0x74,
    I32_Shr_s           = 0x75,
    I32_Shr_u           = 0x76,
    I32_Rotl            = 0x77,
    I32_Rotr            = 0x78,
    I64_Clz             = 0x79,
    I64_Ctz             = 0x7A,
    I64_Popcnt          = 0x7B,
    I64_Add             = 0x7C,
    I64_Sub             = 0x7D,
    I64_Mul             = 0x7E,
    I64_Div_s           = 0x7F,
    I64_Div_u           = 0x80,
    I64_Rem_s           = 0x81,
    I64_Rem_u           = 0x82,
    I64_And             = 0x83,
    I64_Or              = 0x84,
    I64_Xor             = 0x85,
    I64_Shl             = 0x86,
    I64_Shr_s           = 0x87,
    I64_Shr_u           = 0x88,
    I64_Rotl            = 0x89,
    I64_Rotr            = 0x8A,
    F32_Abs             = 0x8B,
    F32_Neg             = 0x8C,
    F32_Ceil            = 0x8D,
    F32_Floor           = 0x8E,
    F32_Trunc           = 0x8F,
    F32_Nearest         = 0x90,
    F32_Sqrt            = 0x91,
    F32_Add             = 0x92,
    F32_Sub             = 0x93,
    F32_Mul             = 0x94,
    F32_Div             = 0x95,
    F32_Min             = 0x96,
    F32_Max             = 0x97,
    F32_Copysign        = 0x98,
    F64_Abs             = 0x99,
    F64_Neg             = 0x9A,
    F64_Ceil            = 0x9B,
    F64_Floor           = 0x9C,
    F64_Trunc           = 0x9D,
    F64_Nearest         = 0x9E,
    F64_Sqrt            = 0x9F,
    F64_Add             = 0xA0,
    F64_Sub             = 0xA1,
    F64_Mul             = 0xA2,
    F64_Div             = 0xA3,
    F64_Min             = 0xA4,
    F64_Max             = 0xA5,
    F64_Copysign        = 0xA6,
    I32_Wrap_i64        = 0xA7,
    I32_Trunc_f32_s     = 0xA8,
    I32_Trunc_f32_u     = 0xA9,
    I32_Trunc_f64_s     = 0xAA,
    I32_Trunc_f64_u     = 0xAB,
    I64_Extend_i32_s    = 0xAC,
    I64_Extend_i32_u    = 0xAD,
    I64_Trunc_f32_s     = 0xAE,
    I64_Trunc_f32_u     = 0xAF,
    I64_Trunc_f64_s     = 0xB0,
    I64_Trunc_f64_u     = 0xB1,
    F32_Convert_i32_s   = 0xB2,
    F32_Convert_i32_u   = 0xB3,
    F32_Convert_i64_s   = 0xB4,
    F32_Convert_i64_u   = 0xB5,
    F32_Demote_f64      = 0xB6,
    F64_Convert_i32_s   = 0xB7,
    F64_Convert_i32_u   = 0xB8,
    F64_Convert_i64_s   = 0xB9,
    F64_Convert_i64_u   = 0xBA,
    F64_Promote_f32     = 0xBB,
    I32_Reinterpret_f32 = 0xBC,
    I64_Reinterpret_f64 = 0xBD,
    F32_Reinterpret_i32 = 0xBE,
    F64_Reinterpret_i64 = 0xBF,
    I32_Extend8_s       = 0xC0,
    I32_Extend16_s      = 0xC1,
    I64_Extend8_s       = 0xC2,
    I64_Extend16_s      = 0xC3,
    I64_Extend32_s      = 0xC4,
    Extended            = 0xFC,
} Opcode;

typedef enum {
    MemoryCopy          = 10,
    MemoryFill          = 11,
} ExtendedOpcode;
